---
  title: Service architecture
---
classDiagram
  grpc-order --> api
  api ..> api-port
  api-port <|.. Application
  Order <-- Application
  Application <.. db-port
  Application <.. payment-port
  db-port ..> db
  payment-port ..> payment
  db ..> db-mysql
  payment ..> grpc-payment
  class grpc-order {
    <<Service>>
    adapter.Run()
  }
  class api {
    <<Adapter>>
    api  port.API
	  port int
    InitAdapter(api port.API, port int) *Adapter
    adapter.Create(ctx context.Context, request *order.CreateOrderRequest) (*order.CreateOrderResponse, error)
  }
  class api-port {
    <<Interface>>
    PlaceOrder(order domain.Order) (domain.Order, error)
  }
  class Application {
    <<Core>>
    db      port.DB
	  payment port.Payment
    InitApplication(db port.DBPort, payment port.PaymentPort) *Application
    application.PlaceOrder(order domain.Order) (domain.Order, error)
  }
  class Order {
    <<Domain>>
    Order
    OrderItem
    NewOrder(customerId int64, orderItems []OrderItem) Order
    order.TotalPrice() float32
  }
  class db-port {
    <<Interface>>
    Get(id string) (Order, error)
	  Save(*domain.Order) error
  }
  class payment-port {
    <<Interface>>
    Charge(*domain.Order) error
  }
  class db {
    <<Adapter>>
  }
  class payment {
    <<Adapter>>
  }
  class db-mysql {
    <<Service>>
  }
  class grpc-payment {
    <<Service>>
  }